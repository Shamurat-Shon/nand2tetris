// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * The ALU (Arithmetic Logic Unit)
 * Performs computations on x and y according to zx, nx, zy, ny, f, no.
 * Outputs: out[16], zr = 1 if out == 0, ng = 1 if out < 0.
 */

CHIP ALU {
    IN
        x[16], y[16],
        zx, nx, zy, ny, f, no;
    OUT
        out[16], zr, ng;

    PARTS:
    // --- preprocess x ---
    Mux16(a=x, b=false, sel=zx, out=xZero);
    Not16(in=xZero, out=xZeroNot);
    Mux16(a=xZero, b=xZeroNot, sel=nx, out=x1);

    // --- preprocess y ---
    Mux16(a=y, b=false, sel=zy, out=yZero);
    Not16(in=yZero, out=yZeroNot);
    Mux16(a=yZero, b=yZeroNot, sel=ny, out=y1);

    // --- core function: AND or ADD ---
    And16(a=x1, b=y1, out=andOut);
    Add16(a=x1, b=y1, out=addOut);
    Mux16(a=andOut, b=addOut, sel=f, out=fOut);

    // --- optional negate ---
    Not16(in=fOut, out=fOutNot);
    Mux16(a=fOut, b=fOutNot, sel=no, out=result);

    // --- final output ---
    Or16(a=result, b=false, out=out);

    // --- duplicate result safely for zero check ---
    // bottom half (lower 8 bits)
    And16(a=result,
          b[0]=true, b[1]=true, b[2]=true, b[3]=true,
          b[4]=true, b[5]=true, b[6]=true, b[7]=true,
          b[8]=false, b[9]=false, b[10]=false, b[11]=false,
          b[12]=false, b[13]=false, b[14]=false, b[15]=false,
          out=lowBits);

    // top half (upper 8 bits)
    And16(a=result,
          b[0]=false, b[1]=false, b[2]=false, b[3]=false,
          b[4]=false, b[5]=false, b[6]=false, b[7]=false,
          b[8]=true, b[9]=true, b[10]=true, b[11]=true,
          b[12]=true, b[13]=true, b[14]=true, b[15]=true,
          out=highBits);

    // --- zero flag (zr) ---
    Or8Way(in[0]=lowBits[0], in[1]=lowBits[1], in[2]=lowBits[2], in[3]=lowBits[3],
           in[4]=lowBits[4], in[5]=lowBits[5], in[6]=lowBits[6], in[7]=lowBits[7],
           out=lowNZ);

    Or8Way(in[0]=highBits[8], in[1]=highBits[9], in[2]=highBits[10], in[3]=highBits[11],
           in[4]=highBits[12], in[5]=highBits[13], in[6]=highBits[14], in[7]=highBits[15],
           out=highNZ);

    Or(a=lowNZ, b=highNZ, out=anyNZ);
    Not(in=anyNZ, out=zr);

    // --- negative flag (ng) ---
    And(a=result[15], b=true, out=ng);
}